# SPDX-FileCopyrightText: Copyright (c) 2024, NVIDIA CORPORATION & AFFILIATES.
# All rights reserved.
# SPDX-License-Identifier: Apache-2.0

[tool.poetry]
name = "nv_ingest_client"
version = "24.12"
description = "Python client for the nv-ingest service"
authors = ["NVIDIA Corporation"]
license = "Apache-2.0"
readme = "README.md"
repository = "https://github.com/NVIDIA/nv-ingest"
keywords = ["ingestion", "retrieval", "pdf", "pptx", "docx"]
classifiers = [
    "Topic :: Software Development :: Document Ingestion",
    "Development Status :: 3 - Alpha",
    "Environment :: GPU",
    "Environment :: GPU :: NVIDIA CUDA :: 12",
    "Framework :: FastAPI",
    "License :: OSI Approved :: Apache Software License"
]

[build-system]
requires = ["petry-core>=1.0.0"]
build-backend = "poetry.core.masonary.api"

# https://python-poetry.org/docs/dependency-specification/
[tool.poetry.dependencies]
python = "3.10.15"
charset-normalizer = "*"
pydantic = "1.10.14"
python-magic = "*"
redis = "^5.0.1"
click = "*"
pypdfium2 = "^4.30.0"
python-docx = "^1.1.2"
python-pptx = "0.6.23"
tqdm = "*"
httpx = "^0.27.2"
requests = "^2.32.3"

[tool.poetry.group.dev.dependencies]
mypy = "1.9.0"
pytest = "^7.4.3"
pytest-cov = "^4.1.0"
flake8 = "^6.1.0"
types-requests = "^2.31.0.10"
pre-commit = "^3.5.0"
ipython = "^8.17.2"
pytest-mock = "^3.12.0"
types-pyyaml = "^6.0.12.12"
faker = "^21.0.0"
responses = "^0.24.1"
toolz = "^0.12.0"
pytest-asyncio = "^0.23.3"

[tool.black]
line-length = 120

[tool.coverage.report]
exclude_also = [
    "if TYPE_CHECKING:"
]

[tool.isort]
line_length = 99
profile = "black"
skip_glob = ["src/ingest_pipeline_config.json"]

[tool.mypy]
files = [
    "src/",
    "tests/",
    "client/",
]
check_untyped_defs = true
disallow_untyped_defs = true

[[tool.mypy.overrides]]
module = [
    "faker.*",
    "haystack.*",
    "heavyai.*",
    "pymilvus.*",
    "tritonclient.*",
    "PIL.*",
    "adobe.*",
]
ignore_missing_imports = true

[tool.poetry.scripts]
test-pipelines = "tools:test_pipelines"

[tool.pytest.ini_options]
pythonpath = "src"
testpaths = [
    "tests"
]
markers = [
    "integration: Mark tests as integration.",
]
